name: Unity CI (Debug)

on:
  push:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    # Fork PR'da secrets gelmeyeceƒüi i√ßin job'u atla (opsiyonel ama √∂nerilir)
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository }}

    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }} # secrets -> env'e baƒülandƒ±
      REQUIRED_SECRETS: "UNITY_LICENSE"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Clean stray SDK build dirs under Assets
        run: |
          find Assets -type d -name "obj" -prune -exec rm -rf {} +
          find Assets -type d -name "bin" -prune -exec rm -rf {} +

      # üîß D√úZELTƒ∞LEN KISIM: if i√ßinde secrets YOK, env kullan
      - name: Secret var mƒ±? (env katmanƒ±)
        if: ${{ env.UNITY_LICENSE == '' || env.UNITY_LICENSE == null }}
        run: |
          echo "UNITY_LICENSE bo≈ü veya tanƒ±mlƒ± deƒüil. Settings > Secrets > Actions altƒ±nda ekleyin."
          exit 1

      - name: Env‚Äôe geldi mi? (runtime doƒürulama)
        shell: bash
        run: |
          if [ -z "${UNITY_LICENSE+x}" ]; then
            echo "UNITY_LICENSE env‚Äôde YOK (env altƒ±nda baƒülanmamƒ±≈ü)."; exit 1
          fi
          echo "UNITY_LICENSE uzunluk (byte): ${#UNITY_LICENSE}"
          if [ -z "$UNITY_LICENSE" ]; then
            echo "UNITY_LICENSE env‚Äôde VAR ama DEƒûERƒ∞ BO≈û."; exit 1
          fi
          echo "OK: UNITY_LICENSE env‚Äôde mevcut."

      - name: PR Kaynaƒüƒ±
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "HEAD: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "BASE: ${{ github.repository }}"

      - name: Eksik gizli anahtar kontrol√º
        run: |
          missing=0
          for key in $(echo "$REQUIRED_SECRETS" | tr ',' ' '); do
            key=$(echo $key | xargs)
            if [ -z "${!key}" ]; then
              echo "::error title=Eksik Gizli Anahtar::$key tanƒ±mlƒ± deƒüil. (Settings > Secrets > Actions)"
              missing=1
            fi
          done
          [ $missing -eq 0 ] || { echo "Eksik secret nedeniyle durdu."; exit 1; }

      - name: Build (Unity Development)
        id: build
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ env.UNITY_LICENSE }} # burada da env‚Äôden kullan
        with:
          unityVersion: 6000.2.2f1
          targetPlatform: StandaloneWindows64
          buildName: SpaceTrader
          buildMethod: BuildScript.BuildWindowsDevelopment
          allowDirtyBuild: true
          customParameters: -nographics -quit

      - name: Paketle artefact
        id: pack
        run: |
          START=$(date +%s)
          mkdir -p exports
          zip -r "exports/debug_${GITHUB_SHA}.zip" build/StandaloneWindows64 > /dev/null
          SIZE=$(du -h "exports/debug_${GITHUB_SHA}.zip" | awk '{print $1}')
          END=$(date +%s)
          echo "size=$SIZE" >> $GITHUB_OUTPUT
          echo "duration=$((END-START))" >> $GITHUB_OUTPUT

      - name: Telemetri
        run: |
          echo "::notice title=Build S√ºresi::${{ steps.pack.outputs.duration }} saniye"
          echo "::notice title=Artefact Boyutu::${{ steps.pack.outputs.size }}"
          {
            echo "### CI Telemetri"
            echo "- S√ºre: ${{ steps.pack.outputs.duration }} sn"
            echo "- Artefact: \`exports/debug_${GITHUB_SHA}.zip\`"
            echo "- Boyut: ${{ steps.pack.outputs.size }}"
          } >> $GITHUB_STEP_SUMMARY

      - name: Artefact y√ºkle
        uses: actions/upload-artifact@v4
        with:
          name: debug-${{ github.sha }}
          path: exports/debug_${{ github.sha }}.zip
          if-no-files-found: error
